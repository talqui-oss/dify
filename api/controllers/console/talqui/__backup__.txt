
# class TalquiAppListApi(Resource):
#     @marshal_with(app_pagination_fields)
#     def get(self):
#         """Get app list"""
#         parser = reqparse.RequestParser()
#         parser.add_argument(
#             "page",
#             type=inputs.int_range(1, 99999),
#             required=False,
#             default=1,
#             location="args",
#         )
#         parser.add_argument(
#             "limit",
#             type=inputs.int_range(1, 100),
#             required=False,
#             default=20,
#             location="args",
#         )
#         args = parser.parse_args()

#         app_models = db.paginate(
#             db.select(App)
#             .where(App.is_universal == False)
#             .order_by(App.created_at.desc()),
#             page=args["page"],
#             per_page=args["limit"],
#             error_out=False,
#         )

#         return app_models

#     @marshal_with(app_detail_fields)
#     def post(self):
#         """Create app"""
#         tenant_id = request.headers.get("x-tenant-id")
#         parser = reqparse.RequestParser()
#         parser.add_argument("name", type=str, required=True, location="json")
#         parser.add_argument(
#             "mode", type=str, choices=["completion", "chat"], location="json"
#         )
#         parser.add_argument("icon", type=str, location="json")
#         parser.add_argument("icon_background", type=str, location="json")
#         parser.add_argument("model_config", type=dict, location="json")
#         args = parser.parse_args()

#         model_config_template = model_templates[args["mode"] + "_default"]

#         app = App(**model_config_template["app"])
#         app_model_config = AppModelConfig(**model_config_template["model_config"])

#         # get model provider
#         model_provider = ModelProviderFactory.get_preferred_model_provider(
#             tenant_id, app_model_config.model_dict["provider"]
#         )

#         logging.info(model_provider)

#         app.name = args["name"]
#         app.mode = args["mode"]
#         app.icon = args["icon"]
#         app.icon_background = args["icon_background"]
#         app.tenant_id = tenant_id

#         db.session.add(app)
#         db.session.flush()

#         app_model_config.app_id = app.id
#         db.session.add(app_model_config)
#         db.session.flush()

#         app.app_model_config_id = app_model_config.id

#         site = Site(
#             app_id=app.id,
#             title=app.name,
#             default_language="en",
#             customize_token_strategy="not_allow",
#             code=Site.generate_code(16),
#         )

#         db.session.add(site)
#         db.session.commit()

#         app_was_created.send(app)

#         return app, 201

# api.add_resource(TalquiAppListApi, "/talqui/apps")

# class TalquiAppApi(Resource):
#     @marshal_with(app_detail_fields_with_site)
#     def get(self, app_id):
#         """Get app detail"""
#         tenant_id = request.headers.get("x-tenant-id")
#         app_id = str(app_id)
#         app = _get_app(app_id, tenant_id)

#         return app

#     def patch(self, app_id):
#         """Modify app model config"""
#         tenant_id = request.headers.get("x-tenant-id")
#         app_id = str(app_id)
#         app_model = _get_app(app_id, tenant_id)

#         # validate config
#         model_configuration = AppModelConfigService.validate_configuration(
#             tenant_id=tenant_id,
#             account=current_user,
#             config=request.json,
#             mode=app_model.mode,
#         )

#         new_app_model_config = AppModelConfig(
#             app_id=app_model.id,
#         )
#         new_app_model_config = new_app_model_config.from_model_config_dict(
#             model_configuration
#         )

#         db.session.add(new_app_model_config)
#         db.session.flush()

#         app_model.app_model_config_id = new_app_model_config.id
#         db.session.commit()

#         app_model_config_was_updated.send(
#             app_model, app_model_config=new_app_model_config
#         )

#         return {"result": "success"}

# api.add_resource(TalquiAppApi, "/talqui/apps/<uuid:app_id>")

# class TalquiDatasetApiKeyListResource(Resource):
#     max_keys = 10
#     token_prefix = 'dataset-'
#     resource_type = 'dataset'

# @setup_required
# @login_required
# @account_initialization_required
# @marshal_with(api_key_list)
# def get(self):
#     keys = db.session.query(ApiToken). \
#         filter(ApiToken.type == self.resource_type, ApiToken.tenant_id == current_user.current_tenant_id). \
#         all()
#     return {"items": keys}

# @setup_required
# @login_required
# @account_initialization_required
# @marshal_with(api_key_fields)
# def post(self):
#     # The role of the current user in the ta table must be admin or owner
#     # if current_user.current_tenant.current_role not in ['admin', 'owner']:
#     #     raise Forbidden()

#     # current_key_count = db.session.query(ApiToken). \
#     #     filter(ApiToken.type == self.resource_type, ApiToken.tenant_id == current_user.current_tenant_id). \
#     #     count()

#     # if current_key_count >= self.max_keys:
#     #     flask_restful.abort(
#     #         400,
#     #         message=f"Cannot create more than {self.max_keys} API keys for this resource type.",
#     #         code='max_keys_exceeded'
#     #     )
#     tenant_id = request.headers.get('x-tenant-id')
#     key = ApiToken.generate_api_key(self.token_prefix, 24)
#     api_token = ApiToken()
#     api_token.tenant_id = tenant_id
#     api_token.token = key
#     api_token.type = self.resource_type
#     db.session.add(api_token)
#     db.session.commit()
#     return api_token, 200


# api.add_resource(TalquiDatasetApiKeyListResource,
#                  '/talqui/datasets/api-keys')
